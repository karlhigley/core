#
# Copyright (c) 2022, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import asyncio
import logging

from merlin.core.dispatch import concat_columns, is_list_dtype, list_val_dtype

LOG = logging.getLogger("merlin")


class AsyncLocalExecutor:
    """
    An executor for running Merlin operator DAGs locally
    """


    # TODO: Figure out if we can avoid making `transform` async (with a thread or something?)
    # TODO: Figure out how to run blocking operator code in an asynchronous fashion (so op.transform doesn't have to be async)
    async def transform(
        self,
        transformable,
        nodes,
        output_dtypes=None,
        additional_columns=None,
        capture_dtypes=False,
    ):
        """
        Transforms a single dataframe (possibly a partition of a Dask Dataframe)
        by applying the operators from a collection of Nodes
        """
        transformed = []

        for node in nodes:
            result = await self.build_transform(node, transformable, capture_dtypes)
            transformed.append(result)

        output_data = None
        for (node, t) in zip(nodes, transformed):
            output_data = self._combine_node_outputs(node, t, output_data)

        if additional_columns:
            output_data = concat_columns(
                [output_data, transformable[_get_unique(additional_columns)]]
            )

        return output_data

    async def build_transform(self, node, transformable, capture_dtypes):
        input_data = await self._build_input_data(
            node, transformable, capture_dtypes=capture_dtypes
        )

        if node.op:
            transformed_data = self._transform_data(node, input_data, capture_dtypes=capture_dtypes)
        else:
            transformed_data = input_data

        return transformed_data

    async def _build_input_data(self, node, transformable, capture_dtypes=False):
        """
        Recurse through the graph executing parent and dependency operators
        to form the input dataframe for each output node
        Parameters
        ----------
        node : Node
            Output node of the graph to execute
        transformable : Transformable
            Dataframe to run the graph ending with node on
        capture_dtypes : bool, optional
            Overrides the schema dtypes with the actual dtypes when True, by default False
        Returns
        -------
        Transformable
            The input DataFrame or DictArray formed from
            the outputs of upstream parent/dependency nodes
        """
        node_input_cols = _get_unique(node.input_schema.column_names)
        addl_input_cols = set(node.dependency_columns.names)

        if node.parents_with_dependencies:
            # If there are parents, collect their outputs
            # to build the current node's input
            input_data = None
            seen_columns = None

            async def parent_transform(parent, transformable, capture_dtypes):
                return self.transform(transformable, [parent], capture_dtypes=capture_dtypes)

            parent_data_futures = []
            parent_output_cols = []
            parent_outputs = []

            for parent in node.parents_with_dependencies:
                parent_output_cols.append(_get_unique(parent.output_schema.column_names))
                parent_data_future = await parent_transform(parent, transformable, capture_dtypes)
                parent_data_futures.append(parent_data_future)

            try:
                parent_outputs = await asyncio.gather(*parent_data_futures, return_exceptions=False)
            except Exception as ex:
                print("Caught error executing task", ex)
                raise

            for parent_data, parent_cols in zip(parent_outputs, parent_output_cols):
                if input_data is None or not len(input_data):
                    input_data = parent_data[parent_cols]
                    seen_columns = set(parent_cols)
                else:
                    new_columns = set(parent_cols) - seen_columns
                    input_data = concat_columns([input_data, parent_data[list(new_columns)]])
                    seen_columns.update(new_columns)

            # Check for additional input columns that aren't generated by parents
            # and fetch them from the root DataFrame or DictArray
            unseen_columns = set(node.input_schema.column_names) - seen_columns
            addl_input_cols = addl_input_cols.union(unseen_columns)

            # TODO: Find a better way to remove dupes
            addl_input_cols = addl_input_cols - set(input_data.columns)

            if addl_input_cols:
                input_data = concat_columns([input_data, transformable[list(addl_input_cols)]])
        else:
            # If there are no parents, this is an input node,
            # so pull columns directly from root data
            input_data = transformable[node_input_cols + list(addl_input_cols)]

        return input_data

    def _transform_data(self, node, input_data, capture_dtypes=False):
        """
        Run the transform represented by the final node in the graph
        and check output dtypes against the output schema
        Parameters
        ----------
        node : Node
            Output node of the graph to execute
        input_data : Transformable
            Dataframe to run the graph ending with node on
        capture_dtypes : bool, optional
            Overrides the schema dtypes with the actual dtypes when True, by default False
        Returns
        -------
        Transformable
            The output DataFrame or DictArray formed by executing the final node's transform
        Raises
        ------
        TypeError
            If the transformed output columns don't have the same dtypes
            as the output schema columns
        RuntimeError
            If no DataFrame or DictArray is returned from the operator
        """
        try:
            # use input_columns to ensure correct grouping (subgroups)
            selection = node.input_columns.resolve(node.input_schema)
            output_data = node.op.transform(selection, input_data)

            # Update or validate output_data dtypes
            for col_name, output_col_schema in node.output_schema.column_schemas.items():
                col_series = output_data[col_name]
                col_dtype = col_series.dtype
                is_list = is_list_dtype(col_series)

                if is_list:
                    col_dtype = list_val_dtype(col_series)

                output_data_schema = output_col_schema.with_dtype(
                    col_dtype, is_list=is_list, is_ragged=is_list
                )

                if capture_dtypes:
                    node.output_schema.column_schemas[col_name] = output_data_schema
                elif len(output_data):
                    if output_col_schema.dtype != output_data_schema.dtype:
                        raise TypeError(
                            f"Dtype discrepancy detected for column {col_name}: "
                            f"operator {node.op.label} reported dtype "
                            f"`{output_col_schema.dtype}` but returned dtype "
                            f"`{output_data_schema.dtype}`."
                        )
        except Exception:
            LOG.exception("Failed to transform operator %s", node.op)
            raise
        if output_data is None:
            raise RuntimeError(f"Operator {node.op} didn't return a value during transform")

        return output_data

    def _combine_node_outputs(self, node, transformed_data, output):
        node_output_cols = _get_unique(node.output_schema.column_names)

        # dask needs output to be in the same order defined as meta, reorder partitions here
        # this also selects columns (handling the case of removing columns from the output using
        # "-" overload)
        if output is None:
            output = transformed_data[node_output_cols]
        else:
            output = concat_columns([output, transformed_data[node_output_cols]])

        return output


def _get_unique(cols):
    # Need to preserve order in unique-column list
    return list({x: x for x in cols}.keys())
